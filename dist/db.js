"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopDB = void 0;
const sqlite3_1 = require("sqlite3");
const models_1 = require("./models");
const utils_1 = require("./utils");
class ShopDB {
    constructor(dbPath) {
        console.log(dbPath);
        this.db = new sqlite3_1.Database(dbPath);
    }
    close() {
        this.db.close();
    }
    addCashier(cashier) {
        console.log(`Данные по кассиру ${cashier.employeeName.lastName} успешно добавлены в БД`);
        const sql = 'SELECT id FROM Cashier WHERE rowid=last_insert_rowid();';
        let id = -1;
        this.db.get(sql, (res, err) => {
            if (res) {
                id = res;
            }
        });
        return id;
    }
    getCashierById(id) {
        return new Promise((res, rej) => {
            this.db.get(`SELECT Cashier.*, Address.city, Address.street, Address.building, Address.litera, Address.apartment FROM Cashier, Address Where Cashier.addrID = Address.id AND Cashier.id=${id};`, (err, row) => {
                if (row) {
                    const cashier = utils_1.parceCashier(row);
                    res(cashier);
                }
            });
        });
    }
    updateCashier(cashier) {
        let sql = `SELECT addrID FROM Cashier WHERE id='${cashier.id}'`;
        this.db.get(sql, (err, addrIdRow) => {
            if (err) {
                console.log(err);
                console.log(sql);
                return;
            }
            console.log(addrIdRow);
            sql = `UPDATE Address SET city = '${models_1.City[cashier.addr.city]}', street = '${cashier.addr.street}', building = '${cashier.addr.building}', litera = '${cashier.addr.litera}', apartment = '${cashier.addr.apartment}' WHERE id=${addrIdRow.addrID}`;
            this.db.get(sql, (errUpdAddr, resRow) => {
                if (errUpdAddr) {
                    console.log(errUpdAddr);
                    return;
                }
                console.log(sql);
                sql = `UPDATE Cashier SET personnelNumber = '${cashier.personnelNumber}', lastName = '${cashier.employeeName.lastName}', firstName = '${cashier.employeeName.firstName}', patronymic = '${cashier.employeeName.patronymic}', sex = '${models_1.Sex[cashier.sex]}', phone = '${cashier.phone}', addrID = '${addrIdRow.addrID}', birthday = '${utils_1.dateFormat(cashier.birthday)}', shopID = '${cashier.shopID}', startWork = '${cashier.startWork}', lastNet = '${models_1.Net[cashier.lastNet]}' WHERE id='${cashier.id}'`;
                console.log(sql);
                this.db.run(sql, (resUdate, errUpdate) => {
                    if (errUpdate) {
                        console.log(errUpdate);
                        return;
                    }
                    console.log(`Данные кассира ${cashier.employeeName.lastName} успешно обновлены`);
                });
            });
        });
    }
    delCashier(id) {
        const sql = `UPDATE Cashier SET deleted = 1 WHERE id='${id}'`;
        this.db.run(sql, (res, err) => {
            console.log(sql);
            if (err) {
                console.log(err);
                return;
            }
            console.log(`Информация о кассире с ${id} успешно удалена`);
        });
    }
    completDeleteCashier(id) {
        const sql = `DELETE FROM Cashier WHERE id='${id}'`;
        this.db.run(sql, (res, err) => {
            console.log(sql);
            if (err) {
                console.log(err);
                return;
            }
            console.log(`Информация о кассире с ${id} успешно удалена`);
        });
    }
    getAllCashiers() {
        console.log('Информация о всех кассирах:');
        this.db.each('SELECT Cashier.*, Address.* FROM Cashier, Address Where Cashier.addrID = Address.id;', (err, row) => {
            if (row) {
                console.log(utils_1.parceCashier(row));
            }
        });
    }
    getTargetCashiers1() {
        console.log('Данi по усіх касирах магазину за всю історію роботи магазинів ATB у місті Львів, які мають більше 5 років досвіду та раніше працювали у Silpo або Arsen:');
    }
    getTargetCashiers2() {
        console.log('Данi по усіх касирах магазину ATB за адресою Шевенка 100, які працюють на касах з непарним числом щопонеділка у нічну зміну (23:00 - 07:00)');
    }
}
exports.ShopDB = ShopDB;
//# sourceMappingURL=data:application/json;base64,