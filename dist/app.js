"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("./db");
const models_1 = require("./models");
const const_1 = require("./const");
let task = '';
const arg = process.argv[2];
if (arg) {
    task = arg;
}
else {
    process.argv.forEach((val, index, array) => {
        console.log(`${index}: ${val}`);
    });
    console.log(`Please, use one from next options:
              ${const_1.Task.cashierCreate}, 
              ${const_1.Task.cashierUpdate},  
              ${const_1.Task.cashierDelete}, 
              ${const_1.Task.getAllCashiers}, 
              ${const_1.Task.useFilter1}, 
              ${const_1.Task.useFilter2}, 
              ${const_1.Task.getTargetCashiers1} or  
              ${const_1.Task.getTargetCashiers2}`);
}
console.log(process.argv[2]);
const db = new db_1.ShopDB('db.sqlite');
if (task === const_1.Task.cashierCreate) {
    const newCashier = {
        id: null,
        personnelNumber: '457932',
        employeeName: {
            lastName: 'Бабенко',
            firstName: 'Анна',
            patronymic: 'Николаевна',
        },
        sex: models_1.Sex.female,
        phone: '380962571544',
        addr: {
            city: models_1.City.Одесса,
            street: 'ул. Бенюка',
            building: 45,
            litera: null,
            apartment: null,
        },
        birthday: null,
        shopID: 17,
        startWork: new Date(2021, 2, 18),
        endWork: null,
        lastNet: models_1.Net.Comfy,
    };
    const newCashierId = db.addCashier(newCashier);
    newCashierId.then((value) => {
        newCashier.id = value;
        console.log(newCashier.id);
        const tmpCashier = db.getCashierById(newCashier.id);
        tmpCashier.then((values) => {
            const cashier = values;
            console.log(cashier);
            cashier.birthday = new Date(1983, 0, 3);
            cashier.addr.building = 45;
            cashier.addr.apartment = 15;
            console.log(cashier);
            db.updateCashier(cashier);
        });
    });
}
if (task === const_1.Task.cashierDelete) {
    db.delCashier(20);
}
if (task === const_1.Task.getAllCashiers) {
    db.getAllCashiers();
}
if (task === const_1.Task.useFilter1) {
    const fltr1 = {
        firstName: 'Анна',
        lastNet: models_1.Net['Metro Cash&Carry'],
    };
    db.getAllFiltredCashiers(fltr1);
}
if (task === const_1.Task.useFilter2) {
    const fltr2 = {
        operator: '096',
        city: models_1.City.Мариуполь,
    };
    db.getAllFiltredCashiers(fltr2);
}
if (task === const_1.Task.getTargetCashiers1) {
    db.getTargetCashiers1();
}
if (task === const_1.Task.getTargetCashiers2) {
    db.getTargetCashiers2();
}
if (!task) {
    db.close();
}
//# sourceMappingURL=data:application/json;base64,