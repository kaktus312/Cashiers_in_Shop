"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_1 = require("./db");
const models_1 = require("./models");
const const_1 = require("./const");
const utils_1 = require("./utils");
let task = '';
let tmpEmplName = {};
let tmpPatronymic = '';
const tmpPhone = utils_1.randomPhone();
let tmpAddr = {};
let tmpBuilding = null;
let tmpApartment = 0;
let tmpCity;
let id = -1;
const arg = process.argv[2];
console.log(process.argv[2]);
if (arg) {
    if ((arg === const_1.Task.cashierCreate) && (process.argv.length >= 9)) {
        console.log(`${process.argv[3]}, 
${process.argv[4]}, 
${process.argv[5]}, 
${process.argv[6]}, 
${process.argv[7]},
${process.argv[8]}}`);
        task = arg;
        tmpEmplName = {
            lastName: process.argv[3],
            firstName: process.argv[4],
            patronymic: '',
        };
        tmpCity = models_1.City[process.argv[5]];
        tmpCity = (tmpCity) || models_1.City.Львов;
        console.log(tmpCity);
        tmpAddr = {
            city: tmpCity,
            street: process.argv[6],
            building: null,
            apartment: null,
        };
    }
    if ((arg === const_1.Task.cashierUpdate) && (process.argv.length >= 7)) {
        id = process.argv[3];
        tmpPatronymic = process.argv[4];
        tmpBuilding = process.argv[5];
        tmpApartment = process.argv[6];
        task = arg;
    }
    if (((arg === const_1.Task.cashierDelete) || (arg === const_1.Task.getCashierById))
        && (process.argv.length >= 4)) {
        console.log(`Target ID is ${process.argv[3]}`);
        task = arg;
        id = process.argv[3];
    }
    if (!task) {
        utils_1.showHelp();
    }
}
else {
    process.argv.forEach((val, index) => {
        console.log(`${index}: ${val}`);
    });
    utils_1.showHelp();
}
const db = new db_1.ShopDB('db.sqlite');
if (task === const_1.Task.cashierCreate) {
    const newCashier = {
        id: null,
        personnelNumber: utils_1.randomPN(),
        employeeName: tmpEmplName,
        sex: models_1.Sex.female,
        phone: tmpPhone,
        addr: tmpAddr,
        birthday: null,
        shopID: 17,
        startWork: new Date(2021, 2, 18),
        endWork: null,
        lastNet: models_1.Net.Comfy,
    };
    const newCashierId = db.addCashier(newCashier);
    newCashierId.then((value) => {
        newCashier.id = value;
        console.log(newCashier.id);
        const tmpCashier = db.getCashierById(newCashier.id);
        tmpCashier.then((values) => {
            const cashier = values;
            console.log(cashier);
        });
    });
}
if (task === const_1.Task.cashierUpdate) {
    const tmpCashier = db.getCashierById(id);
    tmpCashier.then((values) => {
        const cashier = values;
        console.log(cashier);
        cashier.addr.city = cashier.addr.city;
        cashier.employeeName.patronymic = tmpPatronymic;
        cashier.addr.building = tmpBuilding;
        cashier.addr.apartment = tmpApartment;
        db.updateCashier(cashier);
        console.log(cashier);
    });
}
if (task === const_1.Task.getCashierById) {
    const targetCashier = db.getCashierById(id);
    targetCashier.then((val) => {
        console.log(val);
    });
}
if (task === const_1.Task.cashierDelete) {
    db.completDeleteCashier(id);
}
if (task === const_1.Task.getAllCashiers) {
    db.getAllCashiers();
}
if (task === const_1.Task.useFilter1) {
    const fltr1 = {
        firstName: 'Анна',
        lastNet: models_1.Net['Metro Cash&Carry'],
    };
    db.getAllFiltredCashiers(fltr1);
}
if (task === const_1.Task.useFilter2) {
    const fltr2 = {
        operator: '096',
        city: models_1.City.Мариуполь,
    };
    db.getAllFiltredCashiers(fltr2);
}
if (task === const_1.Task.getTargetCashiers1) {
    db.getTargetCashiers1();
}
if (task === const_1.Task.getTargetCashiers2) {
    db.getTargetCashiers2();
}
if (!task) {
    db.close();
}
//# sourceMappingURL=data:application/json;base64,